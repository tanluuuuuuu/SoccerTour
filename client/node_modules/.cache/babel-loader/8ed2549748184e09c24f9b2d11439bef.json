{"ast":null,"code":"import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\n/**\r\n * @param handlers -\r\n * @internal\r\n */\n\nfunction useTapGesture(_a) {\n  var onTap = _a.onTap,\n      onTapStart = _a.onTapStart,\n      onTapCancel = _a.onTapCancel,\n      whileTap = _a.whileTap,\n      visualElement = _a.visualElement;\n  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n  var isPressing = useRef(false);\n  var cancelPointerEndListeners = useRef(null);\n  /**\r\n   * Only set listener to passive if there are no external listeners.\r\n   */\n\n  var eventOptions = {\n    passive: !(onTapStart || onTap || onTapCancel || onPointerDown)\n  };\n\n  function removePointerEndListener() {\n    var _a;\n\n    (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n    cancelPointerEndListeners.current = null;\n  }\n\n  function checkPointerEnd() {\n    var _a;\n\n    removePointerEndListener();\n    isPressing.current = false;\n    (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n    return !isDragActive();\n  }\n\n  function onPointerUp(event, info) {\n    if (!checkPointerEnd()) return;\n    /**\r\n     * We only count this as a tap gesture if the event.target is the same\r\n     * as, or a child of, this component's element\r\n     */\n\n    !isNodeOrChild(visualElement.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n  }\n\n  function onPointerCancel(event, info) {\n    if (!checkPointerEnd()) return;\n    onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n  }\n\n  function onPointerDown(event, info) {\n    var _a;\n\n    removePointerEndListener();\n    if (isPressing.current) return;\n    isPressing.current = true;\n    cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n    /**\r\n     * Ensure we trigger animations before firing event callback\r\n     */\n\n    (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n  }\n\n  usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\n  useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/SoccerTour/client/node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs"],"names":["useRef","isNodeOrChild","usePointerEvent","addPointerEvent","useUnmountEffect","pipe","AnimationType","isDragActive","useTapGesture","_a","onTap","onTapStart","onTapCancel","whileTap","visualElement","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","passive","onPointerDown","removePointerEndListener","current","call","checkPointerEnd","animationState","setActive","Tap","onPointerUp","event","info","getInstance","target","onPointerCancel","window","undefined"],"mappings":"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","sourcesContent":["import { useRef } from 'react';\r\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\r\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.mjs';\r\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\r\nimport { pipe } from 'popmotion';\r\nimport { AnimationType } from '../render/utils/types.mjs';\r\nimport { isDragActive } from './drag/utils/lock.mjs';\r\n\r\n/**\r\n * @param handlers -\r\n * @internal\r\n */\r\nfunction useTapGesture(_a) {\r\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\r\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\r\n    var isPressing = useRef(false);\r\n    var cancelPointerEndListeners = useRef(null);\r\n    /**\r\n     * Only set listener to passive if there are no external listeners.\r\n     */\r\n    var eventOptions = {\r\n        passive: !(onTapStart || onTap || onTapCancel || onPointerDown),\r\n    };\r\n    function removePointerEndListener() {\r\n        var _a;\r\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\r\n        cancelPointerEndListeners.current = null;\r\n    }\r\n    function checkPointerEnd() {\r\n        var _a;\r\n        removePointerEndListener();\r\n        isPressing.current = false;\r\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\r\n        return !isDragActive();\r\n    }\r\n    function onPointerUp(event, info) {\r\n        if (!checkPointerEnd())\r\n            return;\r\n        /**\r\n         * We only count this as a tap gesture if the event.target is the same\r\n         * as, or a child of, this component's element\r\n         */\r\n        !isNodeOrChild(visualElement.getInstance(), event.target)\r\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\r\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\r\n    }\r\n    function onPointerCancel(event, info) {\r\n        if (!checkPointerEnd())\r\n            return;\r\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\r\n    }\r\n    function onPointerDown(event, info) {\r\n        var _a;\r\n        removePointerEndListener();\r\n        if (isPressing.current)\r\n            return;\r\n        isPressing.current = true;\r\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\r\n        /**\r\n         * Ensure we trigger animations before firing event callback\r\n         */\r\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\r\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\r\n    }\r\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\r\n    useUnmountEffect(removePointerEndListener);\r\n}\r\n\r\nexport { useTapGesture };\r\n"]},"metadata":{},"sourceType":"module"}
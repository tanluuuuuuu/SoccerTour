{"ast":null,"code":"import { useConstant } from '../../utils/use-constant.mjs';\n/**\r\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\r\n *\r\n * ```jsx\r\n * const dragControls = useDragControls()\r\n *\r\n * function startDrag(event) {\r\n *   dragControls.start(event, { snapToCursor: true })\r\n * }\r\n *\r\n * return (\r\n *   <>\r\n *     <div onPointerDown={startDrag} />\r\n *     <motion.div drag=\"x\" dragControls={dragControls} />\r\n *   </>\r\n * )\r\n * ```\r\n *\r\n * @public\r\n */\n\nvar DragControls =\n/** @class */\nfunction () {\n  function DragControls() {\n    this.componentControls = new Set();\n  }\n  /**\r\n   * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\r\n   *\r\n   * @internal\r\n   */\n\n\n  DragControls.prototype.subscribe = function (controls) {\n    var _this = this;\n\n    this.componentControls.add(controls);\n    return function () {\n      return _this.componentControls.delete(controls);\n    };\n  };\n  /**\r\n   * Start a drag gesture on every `motion` component that has this set of drag controls\r\n   * passed into it via the `dragControls` prop.\r\n   *\r\n   * ```jsx\r\n   * dragControls.start(e, {\r\n   *   snapToCursor: true\r\n   * })\r\n   * ```\r\n   *\r\n   * @param event - PointerEvent\r\n   * @param options - Options\r\n   *\r\n   * @public\r\n   */\n\n\n  DragControls.prototype.start = function (event, options) {\n    this.componentControls.forEach(function (controls) {\n      controls.start(event.nativeEvent || event, options);\n    });\n  };\n\n  return DragControls;\n}();\n\nvar createDragControls = function () {\n  return new DragControls();\n};\n/**\r\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\r\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\r\n * might want to initiate that dragging from a different component than the draggable one.\r\n *\r\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\r\n * the draggable component's `dragControls` prop. It exposes a `start` method\r\n * that can start dragging from pointer events on other components.\r\n *\r\n * ```jsx\r\n * const dragControls = useDragControls()\r\n *\r\n * function startDrag(event) {\r\n *   dragControls.start(event, { snapToCursor: true })\r\n * }\r\n *\r\n * return (\r\n *   <>\r\n *     <div onPointerDown={startDrag} />\r\n *     <motion.div drag=\"x\" dragControls={dragControls} />\r\n *   </>\r\n * )\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction useDragControls() {\n  return useConstant(createDragControls);\n}\n\nexport { DragControls, useDragControls };","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/SoccerTour/client/node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.mjs"],"names":["useConstant","DragControls","componentControls","Set","prototype","subscribe","controls","_this","add","delete","start","event","options","forEach","nativeEvent","createDragControls","useDragControls"],"mappings":"AAAA,SAASA,WAAT,QAA4B,8BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,GAAwB;AACpB,SAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,YAAY,CAACG,SAAb,CAAuBC,SAAvB,GAAmC,UAAUC,QAAV,EAAoB;AACnD,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKL,iBAAL,CAAuBM,GAAvB,CAA2BF,QAA3B;AACA,WAAO,YAAY;AAAE,aAAOC,KAAK,CAACL,iBAAN,CAAwBO,MAAxB,CAA+BH,QAA/B,CAAP;AAAkD,KAAvE;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,YAAY,CAACG,SAAb,CAAuBM,KAAvB,GAA+B,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AACrD,SAAKV,iBAAL,CAAuBW,OAAvB,CAA+B,UAAUP,QAAV,EAAoB;AAC/CA,MAAAA,QAAQ,CAACI,KAAT,CAAeC,KAAK,CAACG,WAAN,IAAqBH,KAApC,EAA2CC,OAA3C;AACH,KAFD;AAGH,GAJD;;AAKA,SAAOX,YAAP;AACH,CAnCiC,EAAlC;;AAoCA,IAAIc,kBAAkB,GAAG,YAAY;AAAE,SAAO,IAAId,YAAJ,EAAP;AAA4B,CAAnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,eAAT,GAA2B;AACvB,SAAOhB,WAAW,CAACe,kBAAD,CAAlB;AACH;;AAED,SAASd,YAAT,EAAuBe,eAAvB","sourcesContent":["import { useConstant } from '../../utils/use-constant.mjs';\r\n\r\n/**\r\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\r\n *\r\n * ```jsx\r\n * const dragControls = useDragControls()\r\n *\r\n * function startDrag(event) {\r\n *   dragControls.start(event, { snapToCursor: true })\r\n * }\r\n *\r\n * return (\r\n *   <>\r\n *     <div onPointerDown={startDrag} />\r\n *     <motion.div drag=\"x\" dragControls={dragControls} />\r\n *   </>\r\n * )\r\n * ```\r\n *\r\n * @public\r\n */\r\nvar DragControls = /** @class */ (function () {\r\n    function DragControls() {\r\n        this.componentControls = new Set();\r\n    }\r\n    /**\r\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\r\n     *\r\n     * @internal\r\n     */\r\n    DragControls.prototype.subscribe = function (controls) {\r\n        var _this = this;\r\n        this.componentControls.add(controls);\r\n        return function () { return _this.componentControls.delete(controls); };\r\n    };\r\n    /**\r\n     * Start a drag gesture on every `motion` component that has this set of drag controls\r\n     * passed into it via the `dragControls` prop.\r\n     *\r\n     * ```jsx\r\n     * dragControls.start(e, {\r\n     *   snapToCursor: true\r\n     * })\r\n     * ```\r\n     *\r\n     * @param event - PointerEvent\r\n     * @param options - Options\r\n     *\r\n     * @public\r\n     */\r\n    DragControls.prototype.start = function (event, options) {\r\n        this.componentControls.forEach(function (controls) {\r\n            controls.start(event.nativeEvent || event, options);\r\n        });\r\n    };\r\n    return DragControls;\r\n}());\r\nvar createDragControls = function () { return new DragControls(); };\r\n/**\r\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\r\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\r\n * might want to initiate that dragging from a different component than the draggable one.\r\n *\r\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\r\n * the draggable component's `dragControls` prop. It exposes a `start` method\r\n * that can start dragging from pointer events on other components.\r\n *\r\n * ```jsx\r\n * const dragControls = useDragControls()\r\n *\r\n * function startDrag(event) {\r\n *   dragControls.start(event, { snapToCursor: true })\r\n * }\r\n *\r\n * return (\r\n *   <>\r\n *     <div onPointerDown={startDrag} />\r\n *     <motion.div drag=\"x\" dragControls={dragControls} />\r\n *   </>\r\n * )\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction useDragControls() {\r\n    return useConstant(createDragControls);\r\n}\r\n\r\nexport { DragControls, useDragControls };\r\n"]},"metadata":{},"sourceType":"module"}
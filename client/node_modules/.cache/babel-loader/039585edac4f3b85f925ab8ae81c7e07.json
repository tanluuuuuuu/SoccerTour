{"ast":null,"code":"import { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { startAnimation } from './utils/transitions.mjs';\n/**\r\n * Animate a single value or a `MotionValue`.\r\n *\r\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\r\n *\r\n * The second is either a value to animate to, or an array of keyframes to animate through.\r\n *\r\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\r\n *\r\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\r\n *\r\n * ```javascript\r\n * const x = useMotionValue(0)\r\n *\r\n * useEffect(() => {\r\n *   const controls = animate(x, 100, {\r\n *     type: \"spring\",\r\n *     stiffness: 2000,\r\n *     onComplete: v => {}\r\n *   })\r\n *\r\n *   return controls.stop\r\n * })\r\n * ```\r\n *\r\n * @public\r\n */\n\nfunction animate(from, to, transition) {\n  if (transition === void 0) {\n    transition = {};\n  }\n\n  var value = isMotionValue(from) ? from : motionValue(from);\n  startAnimation(\"\", value, to, transition);\n  return {\n    stop: function () {\n      return value.stop();\n    },\n    isAnimating: function () {\n      return value.isAnimating();\n    }\n  };\n}\n\nexport { animate };","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/SoccerTour/client/node_modules/framer-motion/dist/es/animation/animate.mjs"],"names":["motionValue","isMotionValue","startAnimation","animate","from","to","transition","value","stop","isAnimating"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,EAAvB,EAA2BC,UAA3B,EAAuC;AACnC,MAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,IAAAA,UAAU,GAAG,EAAb;AAAkB;;AAC/C,MAAIC,KAAK,GAAGN,aAAa,CAACG,IAAD,CAAb,GAAsBA,IAAtB,GAA6BJ,WAAW,CAACI,IAAD,CAApD;AACAF,EAAAA,cAAc,CAAC,EAAD,EAAKK,KAAL,EAAYF,EAAZ,EAAgBC,UAAhB,CAAd;AACA,SAAO;AACHE,IAAAA,IAAI,EAAE,YAAY;AAAE,aAAOD,KAAK,CAACC,IAAN,EAAP;AAAsB,KADvC;AAEHC,IAAAA,WAAW,EAAE,YAAY;AAAE,aAAOF,KAAK,CAACE,WAAN,EAAP;AAA6B;AAFrD,GAAP;AAIH;;AAED,SAASN,OAAT","sourcesContent":["import { motionValue } from '../value/index.mjs';\r\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\r\nimport { startAnimation } from './utils/transitions.mjs';\r\n\r\n/**\r\n * Animate a single value or a `MotionValue`.\r\n *\r\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\r\n *\r\n * The second is either a value to animate to, or an array of keyframes to animate through.\r\n *\r\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\r\n *\r\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\r\n *\r\n * ```javascript\r\n * const x = useMotionValue(0)\r\n *\r\n * useEffect(() => {\r\n *   const controls = animate(x, 100, {\r\n *     type: \"spring\",\r\n *     stiffness: 2000,\r\n *     onComplete: v => {}\r\n *   })\r\n *\r\n *   return controls.stop\r\n * })\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction animate(from, to, transition) {\r\n    if (transition === void 0) { transition = {}; }\r\n    var value = isMotionValue(from) ? from : motionValue(from);\r\n    startAnimation(\"\", value, to, transition);\r\n    return {\r\n        stop: function () { return value.stop(); },\r\n        isAnimating: function () { return value.isAnimating(); },\r\n    };\r\n}\r\n\r\nexport { animate };\r\n"]},"metadata":{},"sourceType":"module"}
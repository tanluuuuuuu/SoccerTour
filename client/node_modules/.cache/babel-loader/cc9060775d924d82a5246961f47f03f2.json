{"ast":null,"code":"import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nvar prefersReducedMotion = {\n  current: null\n};\nvar hasDetected = false;\n\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    var setReducedMotionPreferences = function () {\n      return prefersReducedMotion.current = motionMediaQuery_1.matches;\n    };\n\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\n\n\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !hasDetected && initPrefersReducedMotion();\n\n  var _a = __read(useState(prefersReducedMotion.current), 1),\n      shouldReduceMotion = _a[0];\n  /**\r\n   * TODO See if people miss automatically updating shouldReduceMotion setting\r\n   */\n\n\n  return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n  var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/SoccerTour/client/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"names":["__read","useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","matches","addListener","useReducedMotion","_a","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;;AACA,IAAIC,oBAAoB,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAA3B;AACA,IAAIC,WAAW,GAAG,KAAlB;;AACA,SAASC,wBAAT,GAAoC;AAChCD,EAAAA,WAAW,GAAG,IAAd;AACA,MAAI,CAACH,SAAL,EACI;;AACJ,MAAIK,MAAM,CAACC,UAAX,EAAuB;AACnB,QAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;AACA,QAAIE,2BAA2B,GAAG,YAAY;AAC1C,aAAQP,oBAAoB,CAACC,OAArB,GAA+BK,kBAAkB,CAACE,OAA1D;AACH,KAFD;;AAGAF,IAAAA,kBAAkB,CAACG,WAAnB,CAA+BF,2BAA/B;AACAA,IAAAA,2BAA2B;AAC9B,GAPD,MAQK;AACDP,IAAAA,oBAAoB,CAACC,OAArB,GAA+B,KAA/B;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,gBAAT,GAA4B;AACxB;AACJ;AACA;AACI,GAACR,WAAD,IAAgBC,wBAAwB,EAAxC;;AACA,MAAIQ,EAAE,GAAGhB,MAAM,CAACC,QAAQ,CAACI,oBAAoB,CAACC,OAAtB,CAAT,EAAyC,CAAzC,CAAf;AAAA,MAA4DW,kBAAkB,GAAGD,EAAE,CAAC,CAAD,CAAnF;AACA;AACJ;AACA;;;AACI,SAAOC,kBAAP;AACH;;AACD,SAASC,sBAAT,GAAkC;AAC9B,MAAIC,uBAAuB,GAAGJ,gBAAgB,EAA9C;AACA,MAAIK,aAAa,GAAGlB,UAAU,CAACC,mBAAD,CAAV,CAAgCiB,aAApD;;AACA,MAAIA,aAAa,KAAK,OAAtB,EAA+B;AAC3B,WAAO,KAAP;AACH,GAFD,MAGK,IAAIA,aAAa,KAAK,QAAtB,EAAgC;AACjC,WAAO,IAAP;AACH,GAFI,MAGA;AACD,WAAOD,uBAAP;AACH;AACJ;;AAED,SAASJ,gBAAT,EAA2BG,sBAA3B","sourcesContent":["import { __read } from 'tslib';\r\nimport { useState, useContext } from 'react';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { isBrowser } from './is-browser.mjs';\r\n\r\n// Does this device prefer reduced motion? Returns `null` server-side.\r\nvar prefersReducedMotion = { current: null };\r\nvar hasDetected = false;\r\nfunction initPrefersReducedMotion() {\r\n    hasDetected = true;\r\n    if (!isBrowser)\r\n        return;\r\n    if (window.matchMedia) {\r\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\r\n        var setReducedMotionPreferences = function () {\r\n            return (prefersReducedMotion.current = motionMediaQuery_1.matches);\r\n        };\r\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\r\n        setReducedMotionPreferences();\r\n    }\r\n    else {\r\n        prefersReducedMotion.current = false;\r\n    }\r\n}\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !hasDetected && initPrefersReducedMotion();\r\n    var _a = __read(useState(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\r\n    /**\r\n     * TODO See if people miss automatically updating shouldReduceMotion setting\r\n     */\r\n    return shouldReduceMotion;\r\n}\r\nfunction useReducedMotionConfig() {\r\n    var reducedMotionPreference = useReducedMotion();\r\n    var reducedMotion = useContext(MotionConfigContext).reducedMotion;\r\n    if (reducedMotion === \"never\") {\r\n        return false;\r\n    }\r\n    else if (reducedMotion === \"always\") {\r\n        return true;\r\n    }\r\n    else {\r\n        return reducedMotionPreference;\r\n    }\r\n}\r\n\r\nexport { useReducedMotion, useReducedMotionConfig };\r\n"]},"metadata":{},"sourceType":"module"}
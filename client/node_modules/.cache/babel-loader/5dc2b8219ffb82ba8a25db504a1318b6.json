{"ast":null,"code":"import { __rest } from 'tslib';\nimport { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n/**\r\n * Build SVG visual attrbutes, like cx and style.transform\r\n */\n\nfunction buildSVGAttrs(state, _a, options, transformTemplate) {\n  var attrX = _a.attrX,\n      attrY = _a.attrY,\n      originX = _a.originX,\n      originY = _a.originY,\n      pathLength = _a.pathLength,\n      _b = _a.pathSpacing,\n      pathSpacing = _b === void 0 ? 1 : _b,\n      _c = _a.pathOffset,\n      pathOffset = _c === void 0 ? 0 : _c,\n      // This is object creation, which we try to avoid per-frame.\n  latest = __rest(_a, [\"attrX\", \"attrY\", \"originX\", \"originY\", \"pathLength\", \"pathSpacing\", \"pathOffset\"]);\n\n  buildHTMLStyles(state, latest, options, transformTemplate);\n  state.attrs = state.style;\n  state.style = {};\n  var attrs = state.attrs,\n      style = state.style,\n      dimensions = state.dimensions;\n  /**\r\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\r\n   * and copy it into style.\r\n   */\n\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  } // Parse transformOrigin\n\n\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  } // Treat x/y not as shortcuts but as actual attributes\n\n\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY; // Build SVG path if one has been defined\n\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\n\nexport { buildSVGAttrs };","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/SoccerTour/client/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"names":["__rest","buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","_a","options","transformTemplate","attrX","attrY","originX","originY","pathLength","_b","pathSpacing","_c","pathOffset","latest","attrs","style","dimensions","transform","undefined","transformOrigin","x","y"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,EAA9B,EAAkCC,OAAlC,EAA2CC,iBAA3C,EAA8D;AAC1D,MAAIC,KAAK,GAAGH,EAAE,CAACG,KAAf;AAAA,MAAsBC,KAAK,GAAGJ,EAAE,CAACI,KAAjC;AAAA,MAAwCC,OAAO,GAAGL,EAAE,CAACK,OAArD;AAAA,MAA8DC,OAAO,GAAGN,EAAE,CAACM,OAA3E;AAAA,MAAoFC,UAAU,GAAGP,EAAE,CAACO,UAApG;AAAA,MAAgHC,EAAE,GAAGR,EAAE,CAACS,WAAxH;AAAA,MAAqIA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAAvK;AAAA,MAA2KE,EAAE,GAAGV,EAAE,CAACW,UAAnL;AAAA,MAA+LA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAAhO;AAAA,MACA;AACAE,EAAAA,MAAM,GAAGlB,MAAM,CAACM,EAAD,EAAK,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,SAA9B,EAAyC,YAAzC,EAAuD,aAAvD,EAAsE,YAAtE,CAAL,CAFf;;AAGAL,EAAAA,eAAe,CAACI,KAAD,EAAQa,MAAR,EAAgBX,OAAhB,EAAyBC,iBAAzB,CAAf;AACAH,EAAAA,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACe,KAApB;AACAf,EAAAA,KAAK,CAACe,KAAN,GAAc,EAAd;AACA,MAAID,KAAK,GAAGd,KAAK,CAACc,KAAlB;AAAA,MAAyBC,KAAK,GAAGf,KAAK,CAACe,KAAvC;AAAA,MAA8CC,UAAU,GAAGhB,KAAK,CAACgB,UAAjE;AACA;AACJ;AACA;AACA;;AACI,MAAIF,KAAK,CAACG,SAAV,EAAqB;AACjB,QAAID,UAAJ,EACID,KAAK,CAACE,SAAN,GAAkBH,KAAK,CAACG,SAAxB;AACJ,WAAOH,KAAK,CAACG,SAAb;AACH,GAhByD,CAiB1D;;;AACA,MAAID,UAAU,KACTV,OAAO,KAAKY,SAAZ,IAAyBX,OAAO,KAAKW,SAArC,IAAkDH,KAAK,CAACE,SAD/C,CAAd,EACyE;AACrEF,IAAAA,KAAK,CAACI,eAAN,GAAwBtB,sBAAsB,CAACmB,UAAD,EAAaV,OAAO,KAAKY,SAAZ,GAAwBZ,OAAxB,GAAkC,GAA/C,EAAoDC,OAAO,KAAKW,SAAZ,GAAwBX,OAAxB,GAAkC,GAAtF,CAA9C;AACH,GArByD,CAsB1D;;;AACA,MAAIH,KAAK,KAAKc,SAAd,EACIJ,KAAK,CAACM,CAAN,GAAUhB,KAAV;AACJ,MAAIC,KAAK,KAAKa,SAAd,EACIJ,KAAK,CAACO,CAAN,GAAUhB,KAAV,CA1BsD,CA2B1D;;AACA,MAAIG,UAAU,KAAKU,SAAnB,EAA8B;AAC1BpB,IAAAA,YAAY,CAACgB,KAAD,EAAQN,UAAR,EAAoBE,WAApB,EAAiCE,UAAjC,EAA6C,KAA7C,CAAZ;AACH;AACJ;;AAED,SAASb,aAAT","sourcesContent":["import { __rest } from 'tslib';\r\nimport { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\r\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\r\nimport { buildSVGPath } from './path.mjs';\r\n\r\n/**\r\n * Build SVG visual attrbutes, like cx and style.transform\r\n */\r\nfunction buildSVGAttrs(state, _a, options, transformTemplate) {\r\n    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, \r\n    // This is object creation, which we try to avoid per-frame.\r\n    latest = __rest(_a, [\"attrX\", \"attrY\", \"originX\", \"originY\", \"pathLength\", \"pathSpacing\", \"pathOffset\"]);\r\n    buildHTMLStyles(state, latest, options, transformTemplate);\r\n    state.attrs = state.style;\r\n    state.style = {};\r\n    var attrs = state.attrs, style = state.style, dimensions = state.dimensions;\r\n    /**\r\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\r\n     * and copy it into style.\r\n     */\r\n    if (attrs.transform) {\r\n        if (dimensions)\r\n            style.transform = attrs.transform;\r\n        delete attrs.transform;\r\n    }\r\n    // Parse transformOrigin\r\n    if (dimensions &&\r\n        (originX !== undefined || originY !== undefined || style.transform)) {\r\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\r\n    }\r\n    // Treat x/y not as shortcuts but as actual attributes\r\n    if (attrX !== undefined)\r\n        attrs.x = attrX;\r\n    if (attrY !== undefined)\r\n        attrs.y = attrY;\r\n    // Build SVG path if one has been defined\r\n    if (pathLength !== undefined) {\r\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\r\n    }\r\n}\r\n\r\nexport { buildSVGAttrs };\r\n"]},"metadata":{},"sourceType":"module"}